{"version":3,"sources":["Utilities.js","World.js","WorldSim.js","Actions.js","Robots.js","SimManager.js","App.js","serviceWorker.js","index.js"],"names":["UniqueKeyGenerator","this","uniqueKey","VACUUM","WorldSize","world","numRows","numCols","RandomWorldIdx","gridSize","Math","floor","random","InitWorld","grid","Array","fill","robotIdx","dirtyWorld","Object","assign","randomPickCount","_","randomIdx","MarkRandomSpotsWithDirt","DirtPresentInCell","cell","includes","RobotPresentInCell","RobotIdxInWorld","entries","index","RobotOnDirt","RobotPositionInWorld","idx","x","y","GetPositionFromIdxInWorld","UpdateWorld","robotAction","slice","pos","replace","GetFlattenedIdx","WorldSim","props","keyGen","renderVacuum","className","robot","action","cssProperties","style","map","key","renderCell","Actions","freeze","Expand","node","children","newWorld","push","state","parent","RetrieveActionsToNode","child","actions","BreadthFirstSearchAgent","memory","hasOwnProperty","remainingActions","length","frontier","reached","shift","BreadthFirstSearch","pop","RandomAgent","DumbAgent","lastAction","nextAction","robotPosition","RobotTypes","CreateRobot","RobotType","type","agentFunction","console","log","SimManager","useState","simState","setSimState","runningSim","setRunningSim","timer","useRef","useEffect","current","setInterval","prevSimState","clearInterval","handleRobotChange","event","target","value","handleRowChange","parseInt","handleColChange","resetWorld","stopWorld","startWorld","renderRobotSelection","onChange","renderRobotTypeOption","renderNumberSelection","num","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ddcb6d64.chunk.js","sourcesContent":["class UniqueKeyGenerator {\n  \n  constructor() {\n    this.uniqueKey = 0\n  }\n\n  key() {\n    return ++this.uniqueKey;\n  }\n\n}\n\nexport {UniqueKeyGenerator};\n","// hello world\n\nfunction SelectRandomCell(gridSize) {\n   return Math.floor(Math.random() * gridSize);\n}\n \nfunction GetFlattenedIdx(x, y, numCols) {\n   return y*numCols+x;\n}\n\nfunction GetPositionFromIdxInWorld(idx, world) {\n   return {x: idx % world.numCols, y: Math.floor(idx / world.numCols)}   \n}\n\nconst VACUUM = \"_\";\nconst DIRT = \"*\";\n\nfunction WorldSize(world) {\n   return world.numRows*world.numCols;\n}\n\nfunction RandomWorldIdx(world) {\n   return SelectRandomCell(WorldSize(world));\n}\n\nfunction MarkRandomSpotsWithDirt(world) {\n   let dirtyWorld = Object.assign({}, world);\n   let randomPickCount = Math.floor(WorldSize(dirtyWorld) / 2);\n   for (let _ = 0; _ < randomPickCount; ++_) {\n      let randomIdx = RandomWorldIdx(dirtyWorld);\n      dirtyWorld.grid[randomIdx] = dirtyWorld.grid[randomIdx] + DIRT; \n   }\n   return dirtyWorld;\n}\n\nfunction InitWorld(numRows, numCols) {\n   let world = {numRows: numRows, numCols: numCols, grid: Array(numRows*numCols).fill(\"\")};\n   let robotIdx = RandomWorldIdx(world);\n   world.grid[robotIdx] = VACUUM;\n   world = MarkRandomSpotsWithDirt(world);\n   return world;\n}\n\nfunction DirtPresentInCell(cell) {\n   return cell.includes(DIRT);\n}\n\nfunction RobotPresentInCell(cell) {\n   return cell.includes(VACUUM);\n}\n\nfunction RobotIdxInWorld(world) {\n   for (const [index, cell] of world.grid.entries()) {\n      if (RobotPresentInCell(cell)) {\n         return index;\n      }\n   }\n   return null;\n}\n\nfunction RobotOnDirt(world) {\n   const robotIdx  = RobotIdxInWorld(world);\n   const robotCell = world.grid[robotIdx];\n   return DirtPresentInCell(robotCell);\n}\n\nfunction RobotPositionInWorld(world) {\n   return GetPositionFromIdxInWorld(RobotIdxInWorld(world), world);\n}\n\nfunction UpdateWorld(world, robotAction) {\n   let grid     = world.grid.slice();\n   let robotIdx = RobotIdxInWorld(world);\n   let pos      = RobotPositionInWorld(world);\n   let numRows  = world.numRows;\n   let numCols  = world.numCols;\n\n   if (robotAction === \"CLEAN\") {\n      grid[robotIdx] = grid[robotIdx].replace(DIRT, '');\n   }\n   else {\n      grid[robotIdx] = grid[robotIdx].replace(VACUUM, '');\n      if (robotAction === \"LEFT\" && pos.x > 0) {\n         pos.x = pos.x-1;\n      }\n      else if (robotAction === \"RIGHT\" && pos.x < numCols-1) {\n         pos.x = pos.x+1;\n      }\n      else if (robotAction === \"UP\" && pos.y > 0) {\n         pos.y = pos.y-1;\n      }\n      else if (robotAction === \"DOWN\" && pos.y < numRows-1) {\n         pos.y = pos.y+1;\n      }\n      robotIdx = GetFlattenedIdx(pos.x, pos.y, numCols);\n      grid[robotIdx] = grid[robotIdx] + VACUUM;\n   }\n\n   return {numRows: world.numRows, numCols: world.numCols, grid: grid};\n}\n\nexport { InitWorld, UpdateWorld, DirtPresentInCell, RobotPresentInCell, RobotOnDirt, RobotIdxInWorld, RobotPositionInWorld};\n","import React from 'react';\nimport { UniqueKeyGenerator } from './Utilities';\nimport { DirtPresentInCell, RobotPresentInCell } from './World';\n\nfunction WorldSim(props)  {\n   let keyGen = new UniqueKeyGenerator(); // todo do i even need this thing\n \n   const renderVacuum = (cell) => {\n      if (RobotPresentInCell(cell)) {\n         return (\n         <div className='vacuum'><p className='action'>{props.robot.action}</p></div>\n         )\n      }\n      return;\n   }\n\n   const renderCell = (cell) => {\n      if (DirtPresentInCell(cell)) {\n         return <div className='sim-cell' style={{'backgroundColor':'SaddleBrown'}} key={keyGen.key()}>{renderVacuum(cell)}</div>;\n      }\n      return <div className='sim-cell' style={{'backgroundColor':'Cornsilk'}} key={keyGen.key()}>{renderVacuum(cell)}</div>\n   }\n\n   const renderCells = () => {\n      return (\n         props.world.grid.map((cell) => renderCell(cell))\n      );\n   }\n\n   let cssProperties = {'--numRows': props.world.numRows, '--numCols': props.world.numCols, '--colWidth': 100 / props.world.numCols + '%' };\n \n   return (\n      <div className='div-sim' style={cssProperties}>\n         {renderCells()}\n      </div>\n   );\n}\n\nexport default WorldSim;\n","const Actions = [\"CLEAN\", \"LEFT\", \"RIGHT\", \"DOWN\", \"UP\"];\n\nObject.freeze(Actions);\n\nexport { Actions };","import {Actions} from './Actions';\nimport {UpdateWorld, RobotOnDirt, RobotIdxInWorld, RobotPositionInWorld} from './World';\n\nconst Expand = (world, node) => {\n   let children = [];\n   for (let action of [\"LEFT\", \"RIGHT\", \"UP\", \"DOWN\"]) {\n      let newWorld = UpdateWorld(world, action);\n      if (RobotIdxInWorld(world) !== RobotIdxInWorld(newWorld)) {\n         // this is a valid action, append list with this node\n         children.push({state: newWorld, parent: node, action: action});\n      }\n   }\n\n   return children;\n}\n\nconst RetrieveActionsToNode = (child) => {\n   let actions = [ child.action ];\n   let parent = child.parent;\n   while (parent != null) {\n      if (parent.action) {\n         actions.push(parent.action);\n      }\n      parent = parent.parent;\n   }\n   return actions;\n}\n\nconst BreadthFirstSearch = (world) => {\n   // initialize root node w/ state = world\n   let node = {state: world, parent: null, action: null};\n   if (RobotOnDirt(node.state)) {\n      // on goal already\n      return [\"CLEAN\"];\n   }\n\n   let frontier = [ node ];\n   // for reached, we can just keep track of the robot idx, since\n   // the world will only change in the scope of the robots position\n   // in this current world model -> not really a correct representation\n   // but I really, really just want to get this to work for now \n   let reached = [ RobotIdxInWorld(node.state) ];\n\n   while (frontier.length !== 0) {\n      node = frontier.shift(); // fifo like\n      let children = Expand(node.state, node);\n\n      for (let child of children) {\n         if (RobotOnDirt(child.state)) {\n            // on goal\n            return RetrieveActionsToNode(child);\n         }\n         if (!reached.includes(RobotIdxInWorld(child.state))) {\n            reached.push(RobotIdxInWorld(child.state));\n            frontier.push(child);\n         }\n      }\n   }\n   return [];\n} \n\nconst BreadthFirstSearchAgent = (world, memory) => { \n   if (!memory.hasOwnProperty('remainingActions')) {\n      memory.remainingActions = [];\n   }\n   if (memory.remainingActions.length === 0) { // no remaining actions defined, search to create list\n      memory.remainingActions = BreadthFirstSearch(world);\n   }\n   if (memory.remainingActions.length === 0) {\n      return {action: \"\", memory: memory};\n   }\n   let action = memory.remainingActions.pop();\n   return (action ? {action: action, memory: memory} : {action: \"\", memory: memory});\n}\n\nconst RandomMovement = () => {\n   return Actions[Math.floor(Math.random() * Math.floor(Actions.length-1) + 1)];\n}\n\nconst RandomAgent = (world, memory) => {\n   let nextAction = \"\";\n   if (RobotOnDirt(world)) {\n      nextAction = \"CLEAN\";\n   }\n   else {\n      nextAction = RandomMovement();\n   }\n   return {action: nextAction, memory: memory};\n}\n\nconst DumbAgent = (world, memory) => {\n   if (!memory.hasOwnProperty('lastAction')) {\n      memory.lastAction = \"\";\n   }\n   let nextAction = \"\";\n   if (RobotOnDirt(world)) {\n      nextAction = \"CLEAN\";\n   }\n   else {\n      let robotPosition = RobotPositionInWorld(world);\n      if (memory.lastAction === \"LEFT\") {\n         if (robotPosition.x > 0) {\n            nextAction = \"LEFT\";\n         } else {\n            nextAction = \"RIGHT\";\n         }\n      } else {\n         if (robotPosition.x < world.numCols-1) {\n            nextAction = \"RIGHT\";\n         } else {\n            nextAction = \"LEFT\";\n         }\n      }\n   }\n   return {action: nextAction, memory: {lastAction: nextAction}};\n}\n\nconst RobotTypes = [\"BFSAgent\", \"DumbAgent\", \"RandomAgent\"];\n\nconst CreateRobot = (RobotType) => {\n   if (RobotType === \"DumbAgent\") {\n      return {type: RobotType, agentFunction: DumbAgent, action: \"\", memory: {}};\n   } \n   if (RobotType === \"RandomAgent\") {\n      return {type: RobotType, agentFunction: RandomAgent, action: \"\", memory: {}};\n   }\n   if (RobotType === \"BFSAgent\") {\n      return {type: RobotType, agentFunction: BreadthFirstSearchAgent, action: \"\", memory: {}}; \n   }\n   console.log(\"Bad Robot Type.\");\n   return null;\n}\n\nexport { RobotTypes, CreateRobot };\n","import React, {useEffect, useRef, useState} from 'react';\nimport WorldSim from './WorldSim';\nimport {InitWorld, UpdateWorld} from './World';\nimport { RobotTypes, CreateRobot } from './Robots';\nimport { UniqueKeyGenerator } from './Utilities';\n\nfunction SimManager(props) {\n   const [simState, setSimState] = useState({\n      world: InitWorld(props.numRows, props.numCols),\n      robot: CreateRobot(RobotTypes[0])\n   });\n   const [runningSim, setRunningSim] = useState(true);\n\n   const keyGen = new UniqueKeyGenerator();\n\n   const timer = useRef();\n\n   useEffect(() => {\n      if (runningSim) {\n         timer.current = setInterval(() => {\n            setSimState(prevSimState => {\n               let robot = prevSimState.robot;\n               let world = prevSimState.world;\n               const {action, memory} = robot.agentFunction(world, robot.memory);\n               return { \n                  world: UpdateWorld(world, action),\n                  robot: {type: robot.type, agentFunction: robot.agentFunction, action: action, memory: memory}\n               };\n            })\n         }, 1000)\n      } else {\n         clearInterval(timer.current);\n      }\n   }, [runningSim]); \n\n   const handleRobotChange = (event) => {\n      setSimState({world: simState.world, robot: CreateRobot(event.target.value)});\n   }\n\n   const handleRowChange = (event) => {\n      setSimState({world: InitWorld(parseInt(event.target.value), simState.world.numCols), robot: simState.robot});\n   }\n\n   const handleColChange = (event) => {\n      setSimState({world: InitWorld(simState.world.numRows, parseInt(event.target.value)), robot: simState.robot});\n   }\n\n   const resetWorld = () => {\n      setSimState({world: InitWorld(simState.world.numRows, simState.world.numCols), robot: simState.robot});\n   }\n\n   const stopWorld = () => {\n      setRunningSim(false);\n   }\n\n   const startWorld = () => {\n      setRunningSim(true);\n   }\n\n   const renderRobotTypeOption = (type) => {\n      return <option value={type} key={keyGen.key()}>{type}</option>;\n   }\n\n   const renderRobotSelection = () => {\n      return (\n         <select className='manager-button' value={simState.robot.type} onChange={handleRobotChange}>  \n            {RobotTypes.map((type) => renderRobotTypeOption(type))}          \n         </select>  \n       );\n   }\n\n   const renderNumberSelection = (num) => {\n      return <option value={num} key={keyGen.key()}>{num}</option>\n   }\n\n   const renderRowSelection = () => {\n      return (\n         <select className='manager-button' value={simState.world.numRows} onChange={handleRowChange}>\n            {[1,2,3,4,5,6].map((num) => renderNumberSelection(num))}\n         </select>\n      );\n   }\n\n   const renderColSelection = () => {\n      return (\n         <select className='manager-button' value={simState.world.numCols} onChange={handleColChange}>\n            {[1,2,3,4,5,6].map((num) => renderNumberSelection(num))}\n         </select>\n      );\n   }\n\n   const renderStartStopButton = () => {\n      if (runningSim) {\n         return (\n            <button onClick={stopWorld} className='manager-button'>Stop</button>\n         );\n      }\n      return (\n         <button onClick={startWorld} className='manager-button'>Start</button>\n      );\n   }\n\n   const renderManagerPane = () => {\n      return (\n         <div className='div-pane'>\n            {renderRobotSelection()}\n            {renderRowSelection()}\n            {renderColSelection()}\n            {renderStartStopButton()}\n            <button onClick={resetWorld} className='manager-button'>RESET</button>\n         </div>\n      );\n   }\n\n   const renderWorld = () => {\n      return (\n         <WorldSim robot={simState.robot} world={simState.world}/>\n      );\n   }\n\n   return (\n      <div className='div-manager'>\n         {renderManagerPane()}\n         {renderWorld()}\n      </div>\n   );\n}\n\nexport default SimManager;\n","import React from 'react';\nimport SimManager from './SimManager';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Vacuum World</h1>\n        <SimManager numRows={3} numCols={3}/>       \n      </div>     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}