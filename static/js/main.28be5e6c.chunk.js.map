{"version":3,"sources":["World.js","Actions.js","Utilities.js","WorldSim.js","Robots.js","SimManager.js","App.js","serviceWorker.js","index.js"],"names":["selectRandomCell","gridSize","Math","floor","random","getFlattenedIdx","x","y","numCols","Cell","vacuumPresent","dirtPresent","this","position","initWorld","numRows","world","World","grid","i","j","initGrid","robotIdx","markRandomSpotsWithDirt","updateWorld","robotAction","map","a","Object","assign","pos","robotPosition","robotPos","randomPickCount","size","_","randomIdx","robotCell","Actions","freeze","UniqueKeyGenerator","uniqueKey","WorldSim","props","state","robot","robotActionStr","keyGen","action","nextAction","indexOf","console","log","setState","setInterval","stepSimulation","timerId","timer","clearInterval","startTimer","prevProps","updatedState","runningSim","stopTimer","cell","className","style","renderVacuum","key","renderCell","renderCells","React","Component","BreadthFirstSearchBot","remainingActions","length","breadthFirstSearch","pop","node","parent","robotOnDirt","frontier","reached","shift","children","expand","child","retrieveActionsToNode","includes","push","newWorld","actions","RandomBot","randomMovement","DumbBot","memory","lastAction","RobotTypes","CreateRobot","RobotType","SimManager","resetWorld","handleRobotChange","event","robotType","target","value","handleRowChange","handleColChange","stopWorld","startWorld","updateProperties","document","documentElement","setProperty","prevState","type","onChange","renderRobotTypeOption","num","renderNumberSelection","onClick","renderRobotSelection","renderRowSelection","renderColSelection","renderStartStopButton","renderManagerPane","renderWorld","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28be5e6c.chunk.js","sourcesContent":["// hello world\n\nfunction selectRandomCell(gridSize) {\n   return Math.floor(Math.random() * gridSize);\n}\n \nfunction getFlattenedIdx(x, y, numCols) {\n   return y*numCols+x;\n}\n \nclass Cell {\n   constructor(x,y,vacuumPresent, dirtPresent) {\n      this.position = {x:x, y:y};\n      this.vacuumPresent = vacuumPresent;\n      this.dirtPresent   = dirtPresent; \n   }\n}\n\nfunction initGrid(numRows, numCols) {\n   let grid = [];\n   for (let i = 0; i < numRows; ++i) {\n      for (let j = 0; j < numCols; ++j) {\n         grid[getFlattenedIdx(j,i,numCols)] = new Cell(j, i, false, false);\n      }\n   }\n   return grid;\n}\n\nfunction initWorld(numRows, numCols) {\n   let world = new World(numRows, numCols, initGrid(numRows, numCols), {x: selectRandomCell(numCols), y: selectRandomCell(numRows)});\n   world.grid[world.robotIdx()].vacuumPresent = true;\n   world.markRandomSpotsWithDirt();\n   return world;\n}\n\nfunction updateWorld(world, robotAction) {\n   let grid     = world.grid.map(a => Object.assign({}, a));\n   let pos      = { ...world.robotPosition };\n   let robotIdx = world.robotIdx();\n   let numRows  = world.numRows;\n   let numCols  = world.numCols;\n\n   if (robotAction === \"CLEAN\") {\n      grid[robotIdx].dirtPresent = false;\n   }\n   else {\n      grid[robotIdx].vacuumPresent = false;\n      if (robotAction === \"LEFT\" && pos.x > 0) {\n         pos.x = pos.x-1;\n      }\n      else if (robotAction === \"RIGHT\" && pos.x < numCols-1) {\n         pos.x = pos.x+1;\n      }\n      else if (robotAction === \"UP\" && pos.y > 0) {\n         pos.y = pos.y-1;\n      }\n      else if (robotAction === \"DOWN\" && pos.y < numRows-1) {\n         pos.y = pos.y+1;\n      }\n      grid[getFlattenedIdx(pos.x, pos.y, numCols)].vacuumPresent = true;\n   }\n\n   return new World(numRows, numCols, grid, pos);\n}\n\nclass World {\n   constructor(numRows, numCols, grid, robotPos) {\n      this.numRows       = numRows;\n      this.numCols       = numCols;\n      this.grid          = grid;\n      this.robotPosition = robotPos;\n   }\n\n   markRandomSpotsWithDirt() {\n      let randomPickCount = Math.floor(this.size() / 2);\n      for (let _ = 0; _ < randomPickCount; ++_) {\n         this.grid[this.randomIdx()].dirtPresent = true;\n      }\n   }\n\n   robotIdx() {\n      return getFlattenedIdx(this.robotPosition.x, this.robotPosition.y, this.numCols);\n   }\n\n   size() {\n      return this.numRows*this.numCols;\n   }\n\n   randomIdx() {\n      return selectRandomCell(this.size());\n   }\n\n   robotCell() {\n      return this.grid[this.robotIdx()];\n   }\n\n   robotOnDirt() {\n      return this.robotCell().dirtPresent;\n   }\n}\n\nexport {initWorld, updateWorld};\n","const Actions = [\"CLEAN\", \"LEFT\", \"RIGHT\", \"DOWN\", \"UP\"];\n\nObject.freeze(Actions);\n\nexport { Actions };","class UniqueKeyGenerator {\n  \n  constructor() {\n    this.uniqueKey = 0\n  }\n\n  key() {\n    return ++this.uniqueKey;\n  }\n\n}\n\nexport {UniqueKeyGenerator};\n","import React from 'react';\nimport {updateWorld} from './World';\nimport { Actions } from './Actions';\nimport { UniqueKeyGenerator } from './Utilities';\n\nclass WorldSim extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         world: props.world,\n         robot: props.robot,\n         robotActionStr: \"\",\n         keyGen: new UniqueKeyGenerator()\n      };\n   }\n \n   stepSimulation() {\n      let action = this.state.robot.nextAction(this.state.world);\n      if (Actions.indexOf(action) === -1)\n         console.log(`${action} is not a valid action.`);\n      this.setState({\n         world: updateWorld(this.state.world, action),\n         robotActionStr:action,\n      });\n   }\n   timer() {\n      return setInterval(\n         () => this.stepSimulation(),\n         1000\n      );\n   }\n   startTimer() {\n      this.timerId = this.timer();\n   }\n   stopTimer() {\n      clearInterval(this.timerId);\n   }\n \n   componentDidMount() {\n      this.startTimer();\n   }\n\n   componentDidUpdate(prevProps) {\n      let updatedState = false;\n      if (this.props.world !== prevProps.world) {\n         this.setState({\n            world: this.props.world\n         });\n         updatedState = true;\n      }\n      if (this.props.robot !== prevProps.robot) {\n         this.setState({\n            robot: this.props.robot\n         });\n         updatedState = true;\n      }\n      if (updatedState && this.props.runningSim) {\n         this.stopTimer();\n         this.startTimer();\n      }\n      if (this.props.runningSim !== prevProps.runningSim) {\n         if (this.props.runningSim) {\n            this.startTimer();\n         } else {\n            this.stopTimer();\n         }\n      }\n   }\n \n   componentWillUnmount() {\n      this.stopTimer();\n   }\n \n   renderVacuum(cell) {\n      if (cell.vacuumPresent) {\n         return (\n         <div className='vacuum'><p className='action'>{this.state.robotActionStr}</p></div>\n         )\n      }\n      return;\n   }\n\n   renderCell(cell) {\n      if (cell.dirtPresent) {\n         return <div className='sim-cell' style={{'backgroundColor':'SaddleBrown'}} key={this.state.keyGen.key()}>{this.renderVacuum(cell)}</div>;\n      }\n      return <div className='sim-cell' style={{'backgroundColor':'Cornsilk'}} key={this.state.keyGen.key()}>{this.renderVacuum(cell)}</div>\n   }\n\n   renderCells() {\n      return (\n         this.state.world.grid.map((cell) => this.renderCell(cell))\n      );\n   }\n \n   render() {\n      return (\n         <div className='div-sim'>\n            {this.renderCells()}\n         </div>\n      );\n   }\n}\n\nexport default WorldSim;\n","import {Actions} from './Actions';\nimport {updateWorld} from './World';\n\nclass BreadthFirstSearchBot { // Breadth First Search Bot\n   constructor() {\n      this.remainingActions = [];\n   }\n\n   nextAction(world) {\n      if (this.remainingActions.length === 0) { // no remaining actions defined, search to create list\n         this.remainingActions = this.breadthFirstSearch(world);\n      }\n      if (this.remainingActions.length === 0) {\n         return \"CLEAN\";\n      }\n      let action = this.remainingActions.pop();\n      return (action ? action : \"CLEAN\");\n   }\n\n   breadthFirstSearch(world) {\n      // initialize root node w/ state = world\n      let node = {state: world, parent: null, action: null};\n      if (node.state.robotOnDirt()) {\n         // on goal already\n         return [];\n      }\n\n      let frontier = [ node ];\n      // for reached, we can just keep track of the robot idx, since\n      // the world will only change in the scope of the robots position\n      // in this current world model -> not really a correct representation\n      // but I really, really just want to get this to work for now \n      let reached = [ node.state.robotIdx() ];\n\n      while (frontier.length !== 0) {\n         node = frontier.shift(); // fifo like\n         let children = this.expand(node.state, node);\n\n         for (let child of children) {\n            if (child.state.robotOnDirt()) {\n               // on goal\n               return this.retrieveActionsToNode(child);\n            }\n            if (!reached.includes(child.state.robotIdx())) {\n               reached.push(child.state.robotIdx());\n               frontier.push(child);\n            }\n         }\n      }\n      return [];\n   } \n\n   expand(world, node) {\n      let children = [];\n      for (let action of [\"LEFT\", \"RIGHT\", \"UP\", \"DOWN\"]) {\n         let newWorld = updateWorld(world, action);\n         if (world.robotIdx() !== newWorld.robotIdx()) {\n            // this is a valid action, append list with this node\n            children.push({state: newWorld, parent: node, action: action});\n         }\n      }\n\n      return children;\n   }\n\n   retrieveActionsToNode(child) {\n      let actions = [ child.action ];\n      let parent = child.parent;\n      while (parent != null) {\n         if (parent.action) {\n            actions.push(parent.action);\n         }\n         parent = parent.parent;\n      }\n      return actions;\n   }\n}\n\nclass RandomBot {\n   nextAction(world) {\n      let nextAction = \"\";\n      if (world.robotCell().dirtPresent) {\n         nextAction = \"CLEAN\";\n      }\n      else {\n         nextAction = this.randomMovement();\n      }\n      return nextAction;\n   }\n   randomMovement() {\n      return Actions[Math.floor(Math.random() * Math.floor(Actions.length-1) + 1)];\n   }\n}\n\nclass DumbBot {\n   constructor() {\n      this.memory = [];\n   }\n   nextAction(world) {\n      let nextAction = \"\";\n      if (world.robotCell().dirtPresent) {\n         nextAction = \"CLEAN\";\n      }\n      else {\n         if (this.lastAction() === \"LEFT\") {\n            if (world.robotPosition.x > 0) {\n               nextAction = \"LEFT\";\n            } else {\n               nextAction = \"RIGHT\";\n            }\n         } else {\n            if (world.robotPosition.x < world.numCols-1) {\n               nextAction = \"RIGHT\";\n            } else {\n               nextAction = \"LEFT\";\n            }\n         }\n      }\n      this.memory.push(nextAction);\n      return nextAction;\n   }\n   lastAction() {\n      return this.memory[this.memory.length-1];\n   }\n}\n\nconst RobotTypes = [\"BreadthFirstSearchBot\", \"DumbBot\", \"RandomBot\"];\n\nlet CreateRobot = (RobotType) => {\n   if (RobotType === \"DumbBot\") {\n      return new DumbBot();\n   } \n   if (RobotType === \"RandomBot\") {\n      return new RandomBot();\n   }\n   if (RobotType === \"BreadthFirstSearchBot\") {\n      return new BreadthFirstSearchBot();\n   }\n   console.log(\"Bad Robot Type.\");\n}\n\nexport { RobotTypes, CreateRobot };\n","import React from 'react';\nimport WorldSim from './WorldSim';\nimport {initWorld} from './World';\nimport { RobotTypes, CreateRobot } from './Robots';\nimport { UniqueKeyGenerator } from './Utilities';\n\nclass SimManager extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         world: initWorld(props.numRows, props.numCols),\n         robotType: RobotTypes[0],\n         robot: CreateRobot(RobotTypes[0]),\n         numRows: props.numRows,\n         numCols: props.numCols,\n         runningSim: true,\n         keyGen: new UniqueKeyGenerator()\n      };\n\n      this.updateProperties(props.numRows, props.numCols);\n   }\n\n   updateProperties(numRows, numCols) {\n      document.documentElement.style.setProperty(\"--numRows\", numRows);\n      document.documentElement.style.setProperty(\"--numCols\", numCols);\n      document.documentElement.style.setProperty(\"--colWidth\", 100 / numCols + \"%\");\n   }\n   componentDidUpdate(prevProps, prevState) {\n      if (this.state.numRows !== prevState.numRows || this.state.numCols !== prevState.numCols) {\n         this.updateProperties(this.state.numRows, this.state.numCols);\n         this.resetWorld();\n      }\n   }\n\n   resetWorld = () => {\n      this.setState({world: initWorld(this.state.numRows, this.state.numCols)});\n   }\n\n   handleRobotChange = (event) => {\n      this.setState({robotType: event.target.value, robot: CreateRobot(event.target.value)});\n   }\n\n   handleRowChange = (event) => {\n      this.setState({numRows: event.target.value});\n   }\n\n   handleColChange = (event) => {\n      this.setState({numCols: event.target.value});\n   }\n\n   stopWorld = () => {\n      this.setState({runningSim: false});\n   }\n\n   startWorld = () => {\n      this.setState({runningSim: true});\n   }\n\n   renderRobotTypeOption(type) {\n      return <option value={type} key={this.state.keyGen.key()}>{type}</option>;\n   }\n\n   renderRobotSelection() {\n      return (\n         <select className='manager-button' value={this.state.robotType} onChange={this.handleRobotChange}>  \n            {RobotTypes.map((type) => this.renderRobotTypeOption(type))}          \n         </select>   \n       );\n   }\n\n   renderNumberSelection(num) {\n      return <option value={num} key={this.state.keyGen.key()}>{num}</option>\n   }\n\n   renderRowSelection() {\n      return (\n         <select className='manager-button' value={this.state.numRows} onChange={this.handleRowChange}>\n            {[1,2,3,4,5,6].map((num) => this.renderNumberSelection(num))}\n         </select>\n      );\n   }\n\n   renderColSelection() {\n      return (\n         <select className='manager-button' value={this.state.numCols} onChange={this.handleColChange}>\n            {[1,2,3,4,5,6].map((num) => this.renderNumberSelection(num))}\n         </select>\n      );\n   }\n\n\n   renderStartStopButton() {\n      if (this.state.runningSim) {\n         return (\n            <button onClick={this.stopWorld} className='manager-button'>Stop</button>\n         );\n      }\n      return (\n         <button onClick={this.startWorld} className='manager-button'>Start</button>\n      );\n   }\n\n   renderManagerPane() {\n      return (\n         <div className='div-pane'>\n            {this.renderRobotSelection()}\n            {this.renderRowSelection()}\n            {this.renderColSelection()}\n            {this.renderStartStopButton()}\n            <button onClick={this.resetWorld} className='manager-button'>RESET</button>\n         </div>\n      );\n   }\n\n   renderWorld() {\n      return (\n         <WorldSim robot={this.state.robot} world={this.state.world} runningSim={this.state.runningSim}/>\n      );\n   }\n\n   render() {\n      return (\n         <div className='div-manager'>\n            {this.renderManagerPane()}\n            {this.renderWorld()}\n         </div>\n      );\n   }\n}\n\nexport default SimManager;\n","import React from 'react';\nimport SimManager from './SimManager';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Vacuum World</h1>\n        <SimManager numRows={3} numCols={3}/>       \n      </div>     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}