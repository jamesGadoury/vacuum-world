{"version":3,"sources":["World.js","Actions.js","Utilities.js","WorldSim.js","Robots.js","SimManager.js","App.js","serviceWorker.js","index.js"],"names":["selectRandomCell","gridSize","Math","floor","random","getFlattenedIdx","x","y","numCols","Cell","vacuumPresent","dirtPresent","this","position","initWorld","numRows","world","World","grid","i","j","initGrid","robotIdx","markRandomSpotsWithDirt","updateWorld","robotAction","pos","robotPosition","robotPos","randomPickCount","size","_","randomIdx","Actions","Object","freeze","UniqueKeyGenerator","uniqueKey","WorldSim","props","state","robot","robotActionStr","keyGen","action","nextAction","indexOf","console","log","setState","setInterval","stepSimulation","timerId","timer","clearInterval","startTimer","prevProps","updatedState","runningSim","stopTimer","cell","className","style","renderVacuum","key","map","renderCell","renderCells","React","Component","RandomBot","robotCell","randomMovement","length","DumbBot","memory","lastAction","push","RobotTypes","CreateRobot","RobotType","SimManager","robotType","updateProperties","resetWorld","bind","handleRobotChange","handleRowChange","handleColChange","stopWorld","startWorld","document","documentElement","setProperty","prevState","event","target","value","type","onChange","renderRobotTypeOption","num","renderNumberSelection","onClick","renderRobotSelection","renderRowSelection","renderColSelection","renderStartStopButton","renderManagerPane","renderWorld","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.468e1d68.chunk.js","sourcesContent":["// hello world\n\nfunction selectRandomCell(gridSize) {\n   return Math.floor(Math.random() * gridSize);\n}\n \nfunction getFlattenedIdx(x, y, numCols) {\n   return y*numCols+x;\n}\n \nclass Cell {\n   constructor(x,y,vacuumPresent, dirtPresent) {\n      this.position = {x:x, y:y};\n      this.vacuumPresent = vacuumPresent;\n      this.dirtPresent   = dirtPresent; \n   }\n}\n\nfunction initGrid(numRows, numCols) {\n   let grid = [];\n   for (let i = 0; i < numRows; ++i) {\n      for (let j = 0; j < numCols; ++j) {\n         grid[getFlattenedIdx(j,i,numCols)] = new Cell(j, i, false, false);\n      }\n   }\n   return grid;\n}\n\nfunction initWorld(numRows, numCols) {\n   let world = new World(numRows, numCols, initGrid(numRows, numCols), {x: selectRandomCell(numCols), y: selectRandomCell(numRows)});\n   world.grid[world.robotIdx()].vacuumPresent = true;\n   world.markRandomSpotsWithDirt();\n   return world;\n}\n\nfunction updateWorld(world, robotAction) {\n   let grid     = world.grid;\n   let pos      = world.robotPosition;\n   let robotIdx = world.robotIdx();\n   let numRows  = world.numRows;\n   let numCols  = world.numCols;\n\n   if (robotAction === \"CLEAN\") {\n      grid[robotIdx].dirtPresent = false;\n   }\n   else {\n      grid[robotIdx].vacuumPresent = false;\n      if (robotAction === \"LEFT\" && pos.x > 0) {\n         pos.x--;\n      }\n      else if (robotAction === \"RIGHT\" && pos.x < numCols-1) {\n         pos.x++;\n      }\n      else if (robotAction === \"UP\" && pos.y > 0) {\n         pos.y--;\n      }\n      else if (robotAction === \"DOWN\" && pos.y < numRows-1) {\n         pos.y++;\n      }\n      grid[getFlattenedIdx(pos.x, pos.y, numCols)].vacuumPresent = true;\n   }\n\n   return new World(numRows, numCols, grid, pos);\n}\n\nclass World {\n   constructor(numRows, numCols, grid, robotPos) {\n      this.numRows       = numRows;\n      this.numCols       = numCols;\n      this.grid          = grid;\n      this.robotPosition = robotPos;\n   }\n\n   markRandomSpotsWithDirt() {\n      let randomPickCount = Math.floor(this.size() / 2);\n      for (let _ = 0; _ < randomPickCount; ++_) {\n         this.grid[this.randomIdx()].dirtPresent = true;\n      }\n   }\n\n   robotIdx() {\n      return getFlattenedIdx(this.robotPosition.x, this.robotPosition.y, this.numCols);\n   }\n\n   size() {\n      return this.numRows*this.numCols;\n   }\n\n   randomIdx() {\n      return selectRandomCell(this.size());\n   }\n\n   robotCell() {\n      return this.grid[this.robotIdx()];\n   }\n}\n\nexport {initWorld, updateWorld};\n","const Actions = [\"CLEAN\", \"LEFT\", \"RIGHT\", \"DOWN\", \"UP\"];\n\nObject.freeze(Actions);\n\nexport { Actions };","class UniqueKeyGenerator {\n  \n  constructor() {\n    this.uniqueKey = 0\n  }\n\n  key() {\n    return ++this.uniqueKey;\n  }\n\n}\n\nexport {UniqueKeyGenerator};\n","import React from 'react';\nimport {updateWorld} from './World';\nimport { Actions } from './Actions';\nimport { UniqueKeyGenerator } from './Utilities';\n\nclass WorldSim extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         world: props.world,\n         robot: props.robot,\n         robotActionStr: \"\",\n         keyGen: new UniqueKeyGenerator()\n      };\n   }\n \n   stepSimulation() {\n      let action = this.state.robot.nextAction(this.state.world);\n      if (Actions.indexOf(action) === -1)\n         console.log(`${action} is not a valid action.`);\n      this.setState({\n         world: updateWorld(this.state.world, action),\n         robotActionStr:action,\n      });\n   }\n   timer() {\n      return setInterval(\n         () => this.stepSimulation(),\n         1000\n      );\n   }\n   startTimer() {\n      this.timerId = this.timer();\n   }\n   stopTimer() {\n      clearInterval(this.timerId);\n   }\n \n   componentDidMount() {\n      this.startTimer();\n   }\n\n   componentDidUpdate(prevProps) {\n      let updatedState = false;\n      if (this.props.world !== prevProps.world) {\n         this.setState({\n            world: this.props.world\n         });\n         updatedState = true;\n      }\n      if (this.props.robot !== prevProps.robot) {\n         this.setState({\n            robot: this.props.robot\n         });\n         updatedState = true;\n      }\n      if (updatedState && this.props.runningSim) {\n         this.stopTimer();\n         this.startTimer();\n      }\n      if (this.props.runningSim !== prevProps.runningSim) {\n         if (this.props.runningSim) {\n            this.startTimer();\n         } else {\n            this.stopTimer();\n         }\n      }\n   }\n \n   componentWillUnmount() {\n      this.stopTimer();\n   }\n \n   renderVacuum(cell) {\n      if (cell.vacuumPresent) {\n         return (\n         <div className='vacuum'><p className='action'>{this.state.robotActionStr}</p></div>\n         )\n      }\n      return;\n   }\n\n   renderCell(cell) {\n      if (cell.dirtPresent) {\n         return <div className='sim-cell' style={{'backgroundColor':'SaddleBrown'}} key={this.state.keyGen.key()}>{this.renderVacuum(cell)}</div>;\n      }\n      return <div className='sim-cell' style={{'backgroundColor':'Cornsilk'}} key={this.state.keyGen.key()}>{this.renderVacuum(cell)}</div>\n   }\n\n   renderCells() {\n      return (\n         this.state.world.grid.map((cell) => this.renderCell(cell))\n      );\n   }\n \n   render() {\n      return (\n         <div className='div-sim'>\n            {this.renderCells()}\n         </div>\n      );\n   }\n}\n\nexport default WorldSim;\n","import {Actions} from './Actions';\n\nclass RandomBot {\n   nextAction(world) {\n      let nextAction = \"\";\n      if (world.robotCell().dirtPresent) {\n         nextAction = \"CLEAN\";\n      }\n      else {\n         nextAction = this.randomMovement();\n      }\n      return nextAction;\n   }\n   randomMovement() {\n      return Actions[Math.floor(Math.random() * Math.floor(Actions.length-1) + 1)];\n   }\n}\n\nclass DumbBot {\n   constructor() {\n      this.memory = [];\n   }\n   nextAction(world) {\n      let nextAction = \"\";\n      if (world.robotCell().dirtPresent) {\n         nextAction = \"CLEAN\";\n      }\n      else {\n         if (this.lastAction() === \"LEFT\") {\n            if (world.robotPosition.x > 0) {\n               nextAction = \"LEFT\";\n            } else {\n               nextAction = \"RIGHT\";\n            }\n         } else {\n            if (world.robotPosition.x < world.numCols-1) {\n               nextAction = \"RIGHT\";\n            } else {\n               nextAction = \"LEFT\";\n            }\n         }\n      }\n      this.memory.push(nextAction);\n      return nextAction;\n   }\n   lastAction() {\n      return this.memory[this.memory.length-1];\n   }\n}\n\nconst RobotTypes = [\"DumbBot\", \"RandomBot\"];\n\nlet CreateRobot = (RobotType) => {\n   if (RobotType === \"DumbBot\") {\n      return new DumbBot();\n   } \n   if (RobotType === \"RandomBot\") {\n      return new RandomBot();\n   }\n   console.log(\"Bad Robot Type.\");\n}\n\nexport { RobotTypes, CreateRobot };\n","import React from 'react';\nimport WorldSim from './WorldSim';\nimport {initWorld} from './World';\nimport { RobotTypes, CreateRobot } from './Robots';\nimport { UniqueKeyGenerator } from './Utilities';\n\nclass SimManager extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         world: initWorld(props.numRows, props.numCols),\n         robotType: RobotTypes[0],\n         robot: CreateRobot(RobotTypes[0]),\n         numRows: props.numRows,\n         numCols: props.numCols,\n         runningSim: true,\n         keyGen: new UniqueKeyGenerator()\n      };\n\n      this.updateProperties(props.numRows, props.numCols);\n      this.resetWorld = this.resetWorld.bind(this);\n      this.handleRobotChange = this.handleRobotChange.bind(this);\n      this.handleRowChange = this.handleRowChange.bind(this);\n      this.handleColChange = this.handleColChange.bind(this);\n      this.stopWorld = this.stopWorld.bind(this);\n      this.startWorld = this.startWorld.bind(this);\n   }\n   componentDidMount() {\n   }\n \n   componentWillUnmount() {\n   }\n\n   updateProperties(numRows, numCols) {\n      document.documentElement.style.setProperty(\"--numRows\", numRows);\n      document.documentElement.style.setProperty(\"--numCols\", numCols);\n      document.documentElement.style.setProperty(\"--colWidth\", 100 / numCols + \"%\");\n   }\n   componentDidUpdate(prevProps, prevState) {\n      if (this.state.numRows !== prevState.numRows || this.state.numCols !== prevState.numCols) {\n         this.updateProperties(this.state.numRows, this.state.numCols);\n         this.resetWorld();\n      }\n   }\n\n   resetWorld() {\n      this.setState({world: initWorld(this.state.numRows, this.state.numCols)});\n   }\n   handleRobotChange(event) {\n      this.setState({robotType: event.target.value, robot: CreateRobot(event.target.value)});\n   }\n   handleRowChange(event) {\n      this.setState({numRows: event.target.value});\n   }\n   handleColChange(event) {\n      this.setState({numCols: event.target.value});\n   }\n   renderRobotTypeOption(type) {\n      return <option value={type} key={this.state.keyGen.key()}>{type}</option>;\n   }\n   renderRobotSelection() {\n      return (\n         <select className='manager-button' value={this.state.robotType} onChange={this.handleRobotChange}>  \n            {RobotTypes.map((type) => this.renderRobotTypeOption(type))}          \n         </select>   \n       );\n   }\n   renderNumberSelection(num) {\n      return <option value={num} key={this.state.keyGen.key()}>{num}</option>\n   }\n   renderRowSelection() {\n      return (\n         <select className='manager-button' value={this.state.numRows} onChange={this.handleRowChange}>\n            {[1,2,3,4,5,6].map((num) => this.renderNumberSelection(num))}\n         </select>\n      );\n   }\n   renderColSelection() {\n      return (\n         <select className='manager-button' value={this.state.numCols} onChange={this.handleColChange}>\n            {[1,2,3,4,5,6].map((num) => this.renderNumberSelection(num))}\n         </select>\n      );\n   }\n   stopWorld() {\n      this.setState({runningSim: false});\n   }\n   startWorld() {\n      this.setState({runningSim: true});\n   }\n   renderStartStopButton() {\n      if (this.state.runningSim) {\n         return (\n            <button onClick={this.stopWorld} className='manager-button'>Stop</button>\n         );\n      }\n      return (\n         <button onClick={this.startWorld} className='manager-button'>Start</button>\n      );\n   }\n   renderManagerPane() {\n      return (\n         <div className='div-pane'>\n            {this.renderRobotSelection()}\n            {this.renderRowSelection()}\n            {this.renderColSelection()}\n            {this.renderStartStopButton()}\n            <button onClick={this.resetWorld} className='manager-button'>RESET</button>\n         </div>\n      );\n   }\n\n   renderWorld() {\n      return (\n         <WorldSim robot={this.state.robot} world={this.state.world} runningSim={this.state.runningSim}/>\n      );\n   }\n\n   render() {\n      return (\n         <div className='div-manager'>\n            {this.renderManagerPane()}\n            {this.renderWorld()}\n         </div>\n      );\n   }\n}\n\nexport default SimManager;\n","import React from 'react';\nimport SimManager from './SimManager';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Vacuum World</h1>\n        <SimManager numRows={3} numCols={3}/>       \n      </div>     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}